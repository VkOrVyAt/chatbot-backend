import logging
import json
from pathlib import Path
from typing import List, Dict, Optional
from datetime import datetime

from core.model_trainer import FAQModelTrainer
from core.faq_parser import FAQParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class ModelTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π FAQ –º–æ–¥–µ–ª–∏"""

    def __init__(self, model_path: str = None):
        if model_path is None:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ —Å—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            current_dir = Path(__file__).parent
            model_path = current_dir / "models" / "faq_model"
        self.model_path = Path(model_path)
        self.trainer: Optional[FAQModelTrainer] = None
        self.test_questions: List[str] = []

    def check_model_files(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏"""
        if not self.model_path.exists():
            logger.error(f"–ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.model_path}")
            return False
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
        model_files = [
            "model.safetensors",
            "pytorch_model.bin", 
            "pytorch_model.safetensors"
        ]
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        required_files = [
            "config.json",
            "tokenizer_config.json"
        ]
        
        found_model_file = False
        missing_files = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
        for file in model_files:
            if (self.model_path / file).exists():
                found_model_file = True
                logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏: {file}")
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file in required_files:
            if not (self.model_path / file).exists():
                missing_files.append(file)
        
        if not found_model_file:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏!")
            self.show_directory_contents()
            return False
        
        if missing_files:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {missing_files}")
            self.show_directory_contents()
            return False
        
        return True

    def show_directory_contents(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print(f"\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–ø–∫–∏ –º–æ–¥–µ–ª–∏: {self.model_path}")
        print("=" * 80)
        
        if not self.model_path.exists():
            print("‚ùå –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            print(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {self.model_path}")
            print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
            print("   –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python -m core.model_trainer")
            return
        
        files = list(self.model_path.glob("*"))
        if not files:
            print("‚ùå –ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–∏ –ø—É—Å—Ç–∞!")
            print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: python -m core.model_trainer")
            return
        
        print("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:")
        for file in sorted(files):
            if file.is_file():
                size = f"{file.stat().st_size:,} bytes"
            else:
                size = "DIR"
            print(f"  - {file.name} ({size})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
        print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
        
        config_files = ["config.json", "tokenizer_config.json", "tokenizer.json"]
        model_files = ["model.safetensors", "pytorch_model.bin", "pytorch_model.safetensors"]
        
        print("  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in config_files:
            exists = (self.model_path / file).exists()
            status = "‚úÖ" if exists else "‚ùå"
            print(f"    {status} {file}")
        
        print("  –§–∞–π–ª—ã –º–æ–¥–µ–ª–∏:")
        model_exists = False
        for file in model_files:
            exists = (self.model_path / file).exists()
            status = "‚úÖ" if exists else "‚ùå"
            print(f"    {status} {file}")
            if exists:
                model_exists = True
        
        if not model_exists:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏!")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("   1. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python -m core.model_trainer")
            print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
            print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ")

    def load_model(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            if not self.check_model_files():
                return False

            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ {self.model_path}")
            self.trainer = FAQModelTrainer(output_dir=str(self.model_path))
            self.trainer.load_trained_model()
            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True

        except FileNotFoundError as e:
            logger.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            self.show_directory_contents()
            return False
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
            self.show_directory_contents()
            return False

    def prepare_test_questions(self) -> None:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        self.test_questions = [
            "–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ UrFU?",
            "–ö–∞–∫–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –µ—Å—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ?",
            "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç?",
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?",
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è?",
            "–ï—Å—Ç—å –ª–∏ –æ–±—â–µ–∂–∏—Ç–∏–µ?",
            "–ö–∞–∫–∏–µ –µ—Å—Ç—å –∫—Ä—É–∂–∫–∏ –∏ —Å–µ–∫—Ü–∏–∏?",
            "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ø–µ–Ω–¥–∏—é?",
            "–ì–¥–µ –º–æ–∂–Ω–æ –ø–æ–µ—Å—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ?",
            "–ï—Å—Ç—å –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞?",
            "–ö–∞–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞?",
            "–ì–¥–µ —Å–∫–∞—á–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–± –æ–±—É—á–µ–Ω–∏–∏?",
            "–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–µ—Å–¥–∞—á—É?",
            "–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—á–µ–±–Ω—ã–π –≥–æ–¥?",
            "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –¥–µ–∫–∞–Ω–∞—Ç–æ–º?",
            "–ö–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –µ—Å—Ç—å –Ω–∞ –ò–Ω–§–û?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ–¥—É–ª—å–Ω–æ-—Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞?",
            "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –æ—Ç–ø—É—Å–∫?",
            "–ï—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –ø–æ –æ–±–º–µ–Ω—É?",
            "–ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –º–æ–∂–Ω–æ –∏–∑—É—á–∞—Ç—å?",
        ]

    def test_single_question(self, question: str, max_tokens: int = 150) -> Dict[str, str]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        if not self.trainer:
            return {"question": question, "answer": "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "status": "error"}

        try:
            logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞: {question}")
            answer = self.trainer.generate_answer(question, max_new_tokens=max_tokens)
            return {"question": question, "answer": answer, "status": "success"}
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {question}")
            return {"question": question, "answer": f"–û—à–∏–±–∫–∞: {str(e)}", "status": "error"}

    def test_all_questions(self, save_results: bool = True) -> List[Dict[str, str]]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        if not self.test_questions:
            self.prepare_test_questions()

        results = []
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(self.test_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")

        for i, question in enumerate(self.test_questions, 1):
            print(f"\n{'=' * 80}")
            print(f"–í–û–ü–†–û–° {i}: {question}")
            result = self.test_single_question(question)
            print(f"–û–¢–í–ï–¢: {result['answer']}")
            print(f"–°–¢–ê–¢–£–°: {result['status']}")
            print(f"{'=' * 80}")
            results.append(result)

        if save_results:
            self.save_test_results(results)

        return results

    def save_test_results(self, results: List[Dict[str, str]]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            output_file = self.model_path / "test_results.json"
            test_data = {
                "model_path": str(self.model_path),
                "total_questions": len(results),
                "successful_answers": sum(r["status"] == "success" for r in results),
                "failed_answers": sum(r["status"] == "error" for r in results),
                "test_timestamp": datetime.now().isoformat(),
                "results": results
            }

            with output_file.open("w", encoding="utf-8") as f:
                json.dump(test_data, f, ensure_ascii=False, indent=2)

            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    def interactive_test(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if not self.trainer:
            logger.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return

        print("\n" + "=" * 80)
        print("–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò FAQ")
        print("=" * 80)

        while True:
            try:
                question = input("\n–í–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
                if question.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                    print("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                    break
                if not question:
                    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
                    continue
                result = self.test_single_question(question)
                print(f"\n{'-' * 60}")
                print(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {result['answer']}")
                print(f"{'-' * 60}")
            except KeyboardInterrupt:
                print("\n\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                break

    def compare_with_original_faq(self) -> None:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –º–æ–¥–µ–ª–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ FAQ"""
        if not self.trainer:
            logger.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return

        try:
            parser = FAQParser()
            faq_data = parser.parse_all_files()
            if not faq_data:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ FAQ")
                return

            print("\n" + "=" * 100)
            print("–°–†–ê–í–ù–ï–ù–ò–ï –° –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú–ò FAQ")
            print("=" * 100)

            for i, faq_item in enumerate(faq_data[:10], 1):
                question = faq_item['question']
                original_answer = faq_item['answer']
                result = self.test_single_question(question)
                model_answer = result["answer"]

                print(f"\n{'-' * 100}")
                print(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ {i}")
                print(f"–í–æ–ø—Ä–æ—Å: {question}")
                print(f"\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{original_answer}")
                print(f"\n–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{model_answer}")
                print(f"{'-' * 100}")

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ FAQ")

    def get_model_info(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            config_path = self.model_path / "training_config.json"
            if config_path.exists():
                with config_path.open("r", encoding="utf-8") as f:
                    return json.load(f)
            return {"error": "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏")
            return {"error": str(e)}

    def diagnose_model(self) -> None:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        print("\n" + "=" * 80)
        print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–û–î–ï–õ–ò")
        print("=" * 80)
        
        self.show_directory_contents()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        if self.model_path.exists():
            print("\nüìä –†–∞–∑–º–µ—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:")
            key_files = ["model.safetensors", "pytorch_model.bin", "config.json", "tokenizer_config.json"]
            for file_name in key_files:
                file_path = self.model_path / file_name
                if file_path.exists():
                    size_mb = file_path.stat().st_size / (1024 * 1024)
                    print(f"  {file_name}: {size_mb:.2f} MB")


def main():
    tester = ModelTester()
    
    print("ü§ñ FAQ Model Tester")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    tester.diagnose_model()
    
    if not tester.load_model():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å.")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: python -m core.model_trainer")
        return

    model_info = tester.get_model_info()
    print("\n" + "=" * 80)
    print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–ï–õ–ò")
    print("=" * 80)
    for key, value in model_info.items():
        print(f"{key}: {value}")
    print("=" * 80)

    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ FAQ")
        print("4. –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        print("5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏")
        print("6. –í—ã—Ö–æ–¥")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-6): ").strip()

        if choice == "1":
            tester.test_all_questions()
        elif choice == "2":
            tester.interactive_test()
        elif choice == "3":
            tester.compare_with_original_faq()
        elif choice == "4":
            q = input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å: ").strip()
            if q:
                result = tester.test_single_question(q)
                print(f"\n–û—Ç–≤–µ—Ç: {result['answer']}")
        elif choice == "5":
            tester.diagnose_model()
        elif choice == "6":
            print("–í—ã—Ö–æ–¥.")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    main()